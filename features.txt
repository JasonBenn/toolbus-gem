Thoughts on generating features...
APIDock is somehow scraped from docs, and isn't always reliable. Also, is clearly on the decline.
api.rubyonrails.org is great. Parsed straight from docs.
but you don't want to be too granular. There are like 15k methods in there.
Idea: only add features for places where documentation is more than X lines? (5? 10?)
rdoc actually includes a parser in the gem. Hijack that, find docs, pull out the largest pieces of docs, build a moderation portal and go through them writing PEGs

Probably, for now: manually turn Guides into features. Damn.


style inspiration: https://www.typesafe.com/community/core-tools/activator-and-sbt



FEATURE
id
name (scopes)
summary (method scope in app/models/*.rb)
tool (ActiveRecord)
module (ActiveRecord::Locking)
documentation_url (url)
version_added 2.1
version_removed 4.2.1 (or null)
rubric_glob
rubric_criteria
grammar_version
grammar_url
has_many completions

what happens when:
  name of feature changes
  grammar version will change sometimes - no need to have old version tho
  

USER
id
username
has_many repos

TOOL
name (rails, rails api, ember.js, ember-data)
has_many repos

TOOL_REPOS
tool_id
repo_id

USER_REPOS
user_id
repo_id

REPO
id
name
has_many users
has_many tools
has_many completions

COMPLETION:
id
belongs_to repo
belongs_to feature
commit SHA1
filename
line_start
line_end



GEM REQUEST:
Needs: name, module, rubric_glob, rubric_criteria
Where: tool matches Rails API, version added, version removed





APP = app/**/*.rb
MODELS = app/models/*.rb
JOBS = app/jobs/*.rb

------
Optimistic locking

Optimistic locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data. It does this by checking whether another process has made changes to a record since it was opened, an ActiveRecord::StaleObjectError exception is thrown if that has occurred and the update is ignored.

ActiveRecord::Locking
http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html

> 3.2.1

in MODELS
  .locking_column = :symbol

------
Pessimistic locking

Locking::Pessimistic provides support for row-level locking using SELECT … FOR UPDATE and other lock types.

ActiveRecord::Locking
http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html

> 1.2.0

in APP
  .lock!
  .with_lock

------
Transactions

Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action.

ActiveRecord::Transactions
http://apidock.com/rails/ActiveRecord/Transactions/ClassMethods

> 1.0.0

in APP
  .transaction {...}

------
Single table inheritance

```
Active Record allows inheritance by storing the name of the class in a column that by default is named “type” (can be changed by overwriting Base.inheritance_column). This means that an inheritance looking like this:

class Company < ActiveRecord::Base; end
class Firm < Company; end
class Client < Company; end
class PriorityClient < Client; end

When you do Firm.create(name: "37signals"), this record will be saved in the companies table with type = “Firm”. You can then fetch this row again using Company.where(name: '37signals').first and it will return a Firm object.
```

ActiveRecord::Inheritance
http://apidock.com/rails/ActiveRecord/Inheritance

> 3.2.1

in MODELS
  class A < !ActiveRecord::Base  &&  whoever A does inherit from has type column.

------
Alternative ActiveRecord initialization patterns

```
Active Records accept constructor parameters either in a hash or as a block. The hash method is especially useful when you’re receiving the data from somewhere else, like an HTTP request. It works like this:

user = User.new(name: "David", occupation: "Code Artist")
user.name # => "David"
You can also use block initialization:

user = User.new do |u|
  u.name = "David"
  u.occupation = "Code Artist"
end
And of course you can just create a bare object and specify the attributes after the fact:

user = User.new
user.name = "David"
user.occupation = "Code Artist"
```

ActiveRecord::Base
http://apidock.com/rails/v4.2.1/ActiveRecord/Base

[N/A]

in APP
  ModelClass.new {...}

-----
Conditions

Conditions can either be specified as a string, array, or hash representing the WHERE-part of an SQL statement

class User < ActiveRecord::Base
  def self.authenticate_unsafely(user_name, password)
    where("user_name = '#{user_name}' AND password = '#{password}'").first
  end

  def self.authenticate_safely(user_name, password)
    where("user_name = ? AND password = ?", user_name, password).first
  end

  def self.authenticate_safely_simply(user_name, password)
    where(user_name: user_name, password: password).first
  end
end
```

ActiveRecord::Base
http://apidock.com/rails/v4.2.1/ActiveRecord/Base

N/A

in APP
  .where([string that contains ?]

------ 6

Saving arrays, hashes, and other non-mappable objects in text columns

If you have an attribute that needs to be saved to the database as an object, and retrieved as the same object, then specify the name of that attribute using this method and it will be handled automatically. The serialization is done through YAML. If class_name is specified, the serialized object must be of that class on assignment and retrieval. Otherwise SerializationTypeMismatch will be raised.

ActiveRecord::AttributeMethods::Serialization
http://apidock.com/rails/ActiveRecord/AttributeMethods/Serialization/ClassMethods/serialize

> 3.2.1

in MODELS
  serialize :symbol

------- 7

Connection to multiple databases in different models

Connections are usually created through ActiveRecord::Base.establish_connection and retrieved by ActiveRecord::Base.connection. All classes inheriting from ActiveRecord::Base will use this connection. But you can also set a class-specific connection. For example, if Course is an ActiveRecord::Base, but resides in a different database, you can just say Course.establish_connection and Course and all of its subclasses will use this connection instead.

This feature is implemented by keeping a connection pool in ActiveRecord::Base that is a Hash indexed by the class. If a connection is requested, the retrieve_connection method will go up the class-hierarchy until a connection is found in the connection pool.

ActiveRecord::Base
http://apidock.com/rails/ActiveRecord/Base/connection

CONFUSING VERSION. Docs say < 3.2.13, but there are similar methods in 4.2.1.

in APP
  MyModel.connection OR ActiveRecord::Base.connection

------------

Connection to MongoDB

Connect to a different database adapter on a per-model basis.

class Item
  include Mongoid::Document
  #this is a Mongoid model
end

No URL (possibly search for these in the future, and only non-generated methods will be added)

No version

in MODELS
  include Mongoid::Document


---------- 9

ActiveJob::Enqueueing#enqueue

Enqueues the job to be performed by the queue adapter.

```
enqueue(options={}) Link
Enqueues the job to be performed by the queue adapter.

Options

:wait - Enqueues the job with the specified delay

:wait_until - Enqueues the job at the time specified

:queue - Enqueues the job on the specified queue

Examples

my_job_instance.enqueue
my_job_instance.enqueue wait: 5.minutes
my_job_instance.enqueue queue: :important
my_job_instance.enqueue wait_until: Date.tomorrow.midnight
```

ActiveJob::Enqueuing
http://api.rubyonrails.org/classes/ActiveJob/Enqueuing.html

No version

In APP
  .enqueue

--------- 10

ActiveJob::Enqueueing#retry_job
Reschedules the job to be re-executed. This is useful in combination with the rescue_from option. When you rescue an exception from your job you can ask Active Job to retry performing your job.

```
retry_job(options={}) Link
Reschedules the job to be re-executed. This is useful in combination with the rescue_from option. When you rescue an exception from your job you can ask Active Job to retry performing your job.

Options

:wait - Enqueues the job with the specified delay

:wait_until - Enqueues the job at the time specified

:queue - Enqueues the job on the specified queue

Examples

class SiteScrapperJob < ActiveJob::Base
  rescue_from(ErrorLoadingSite) do
    retry_job queue: :low_priority
  end

  def perform(*args)
    # raise ErrorLoadingSite if cannot scrape
  end
end
```

ActiveJob::Enqueuing
http://api.rubyonrails.org/classes/ActiveJob/Enqueuing.html

No version

In APP
  .retry_job

--------
Benchmarking

```
Benchmark realtime in milliseconds.

Benchmark.realtime { User.all }
# => 8.0e-05

Benchmark.ms { User.all }
# => 0.074
Source: hide | on GitHub

# File activesupport/lib/active_support/core_ext/benchmark.rb, line 11
def ms
  1000 * realtime { yield }
end
```

ActiveSupport::CoreExt

In APP
  Benchmark.ms
